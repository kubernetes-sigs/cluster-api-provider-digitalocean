/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/digitalocean/godo (interfaces: DropletsService)
//
// Generated by this command:
//
//	mockgen -destination droplets_mock.go -package mock_computes github.com/digitalocean/godo DropletsService
//

// Package mock_computes is a generated GoMock package.
package mock_computes

import (
	context "context"
	reflect "reflect"

	godo "github.com/digitalocean/godo"
	gomock "go.uber.org/mock/gomock"
)

// MockDropletsService is a mock of DropletsService interface.
type MockDropletsService struct {
	ctrl     *gomock.Controller
	recorder *MockDropletsServiceMockRecorder
	isgomock struct{}
}

// MockDropletsServiceMockRecorder is the mock recorder for MockDropletsService.
type MockDropletsServiceMockRecorder struct {
	mock *MockDropletsService
}

// NewMockDropletsService creates a new mock instance.
func NewMockDropletsService(ctrl *gomock.Controller) *MockDropletsService {
	mock := &MockDropletsService{ctrl: ctrl}
	mock.recorder = &MockDropletsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDropletsService) EXPECT() *MockDropletsServiceMockRecorder {
	return m.recorder
}

// Actions mocks base method.
func (m *MockDropletsService) Actions(arg0 context.Context, arg1 int, arg2 *godo.ListOptions) ([]godo.Action, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Actions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Action)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Actions indicates an expected call of Actions.
func (mr *MockDropletsServiceMockRecorder) Actions(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Actions", reflect.TypeOf((*MockDropletsService)(nil).Actions), arg0, arg1, arg2)
}

// Backups mocks base method.
func (m *MockDropletsService) Backups(arg0 context.Context, arg1 int, arg2 *godo.ListOptions) ([]godo.Image, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backups", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Image)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Backups indicates an expected call of Backups.
func (mr *MockDropletsServiceMockRecorder) Backups(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backups", reflect.TypeOf((*MockDropletsService)(nil).Backups), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockDropletsService) Create(arg0 context.Context, arg1 *godo.DropletCreateRequest) (*godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockDropletsServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDropletsService)(nil).Create), arg0, arg1)
}

// CreateMultiple mocks base method.
func (m *MockDropletsService) CreateMultiple(arg0 context.Context, arg1 *godo.DropletMultiCreateRequest) ([]godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultiple", arg0, arg1)
	ret0, _ := ret[0].([]godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMultiple indicates an expected call of CreateMultiple.
func (mr *MockDropletsServiceMockRecorder) CreateMultiple(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiple", reflect.TypeOf((*MockDropletsService)(nil).CreateMultiple), arg0, arg1)
}

// Delete mocks base method.
func (m *MockDropletsService) Delete(arg0 context.Context, arg1 int) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDropletsServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDropletsService)(nil).Delete), arg0, arg1)
}

// DeleteByTag mocks base method.
func (m *MockDropletsService) DeleteByTag(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByTag", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByTag indicates an expected call of DeleteByTag.
func (mr *MockDropletsServiceMockRecorder) DeleteByTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByTag", reflect.TypeOf((*MockDropletsService)(nil).DeleteByTag), arg0, arg1)
}

// Get mocks base method.
func (m *MockDropletsService) Get(arg0 context.Context, arg1 int) (*godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockDropletsServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDropletsService)(nil).Get), arg0, arg1)
}

// GetBackupPolicy mocks base method.
func (m *MockDropletsService) GetBackupPolicy(arg0 context.Context, arg1 int) (*godo.DropletBackupPolicy, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupPolicy", arg0, arg1)
	ret0, _ := ret[0].(*godo.DropletBackupPolicy)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBackupPolicy indicates an expected call of GetBackupPolicy.
func (mr *MockDropletsServiceMockRecorder) GetBackupPolicy(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupPolicy", reflect.TypeOf((*MockDropletsService)(nil).GetBackupPolicy), arg0, arg1)
}

// Kernels mocks base method.
func (m *MockDropletsService) Kernels(arg0 context.Context, arg1 int, arg2 *godo.ListOptions) ([]godo.Kernel, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kernels", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Kernel)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Kernels indicates an expected call of Kernels.
func (mr *MockDropletsServiceMockRecorder) Kernels(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kernels", reflect.TypeOf((*MockDropletsService)(nil).Kernels), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockDropletsService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockDropletsServiceMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDropletsService)(nil).List), arg0, arg1)
}

// ListBackupPolicies mocks base method.
func (m *MockDropletsService) ListBackupPolicies(arg0 context.Context, arg1 *godo.ListOptions) (map[int]*godo.DropletBackupPolicy, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupPolicies", arg0, arg1)
	ret0, _ := ret[0].(map[int]*godo.DropletBackupPolicy)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBackupPolicies indicates an expected call of ListBackupPolicies.
func (mr *MockDropletsServiceMockRecorder) ListBackupPolicies(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupPolicies", reflect.TypeOf((*MockDropletsService)(nil).ListBackupPolicies), arg0, arg1)
}

// ListByName mocks base method.
func (m *MockDropletsService) ListByName(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByName", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByName indicates an expected call of ListByName.
func (mr *MockDropletsServiceMockRecorder) ListByName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByName", reflect.TypeOf((*MockDropletsService)(nil).ListByName), arg0, arg1, arg2)
}

// ListByTag mocks base method.
func (m *MockDropletsService) ListByTag(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByTag", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByTag indicates an expected call of ListByTag.
func (mr *MockDropletsServiceMockRecorder) ListByTag(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByTag", reflect.TypeOf((*MockDropletsService)(nil).ListByTag), arg0, arg1, arg2)
}

// ListSupportedBackupPolicies mocks base method.
func (m *MockDropletsService) ListSupportedBackupPolicies(arg0 context.Context) ([]*godo.SupportedBackupPolicy, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSupportedBackupPolicies", arg0)
	ret0, _ := ret[0].([]*godo.SupportedBackupPolicy)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSupportedBackupPolicies indicates an expected call of ListSupportedBackupPolicies.
func (mr *MockDropletsServiceMockRecorder) ListSupportedBackupPolicies(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportedBackupPolicies", reflect.TypeOf((*MockDropletsService)(nil).ListSupportedBackupPolicies), arg0)
}

// ListWithGPUs mocks base method.
func (m *MockDropletsService) ListWithGPUs(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithGPUs", arg0, arg1)
	ret0, _ := ret[0].([]godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWithGPUs indicates an expected call of ListWithGPUs.
func (mr *MockDropletsServiceMockRecorder) ListWithGPUs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithGPUs", reflect.TypeOf((*MockDropletsService)(nil).ListWithGPUs), arg0, arg1)
}

// Neighbors mocks base method.
func (m *MockDropletsService) Neighbors(arg0 context.Context, arg1 int) ([]godo.Droplet, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Neighbors", arg0, arg1)
	ret0, _ := ret[0].([]godo.Droplet)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Neighbors indicates an expected call of Neighbors.
func (mr *MockDropletsServiceMockRecorder) Neighbors(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Neighbors", reflect.TypeOf((*MockDropletsService)(nil).Neighbors), arg0, arg1)
}

// Snapshots mocks base method.
func (m *MockDropletsService) Snapshots(arg0 context.Context, arg1 int, arg2 *godo.ListOptions) ([]godo.Image, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Image)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Snapshots indicates an expected call of Snapshots.
func (mr *MockDropletsServiceMockRecorder) Snapshots(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockDropletsService)(nil).Snapshots), arg0, arg1, arg2)
}
