/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/digitalocean/godo (interfaces: KeysService)

// Package mock_computes is a generated GoMock package.
package mock_computes

import (
	context "context"
	godo "github.com/digitalocean/godo"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKeysService is a mock of KeysService interface.
type MockKeysService struct {
	ctrl     *gomock.Controller
	recorder *MockKeysServiceMockRecorder
}

// MockKeysServiceMockRecorder is the mock recorder for MockKeysService.
type MockKeysServiceMockRecorder struct {
	mock *MockKeysService
}

// NewMockKeysService creates a new mock instance.
func NewMockKeysService(ctrl *gomock.Controller) *MockKeysService {
	mock := &MockKeysService{ctrl: ctrl}
	mock.recorder = &MockKeysServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeysService) EXPECT() *MockKeysServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockKeysService) Create(arg0 context.Context, arg1 *godo.KeyCreateRequest) (*godo.Key, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*godo.Key)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockKeysServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKeysService)(nil).Create), arg0, arg1)
}

// DeleteByFingerprint mocks base method.
func (m *MockKeysService) DeleteByFingerprint(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByFingerprint", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByFingerprint indicates an expected call of DeleteByFingerprint.
func (mr *MockKeysServiceMockRecorder) DeleteByFingerprint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByFingerprint", reflect.TypeOf((*MockKeysService)(nil).DeleteByFingerprint), arg0, arg1)
}

// DeleteByID mocks base method.
func (m *MockKeysService) DeleteByID(arg0 context.Context, arg1 int) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockKeysServiceMockRecorder) DeleteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockKeysService)(nil).DeleteByID), arg0, arg1)
}

// GetByFingerprint mocks base method.
func (m *MockKeysService) GetByFingerprint(arg0 context.Context, arg1 string) (*godo.Key, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFingerprint", arg0, arg1)
	ret0, _ := ret[0].(*godo.Key)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByFingerprint indicates an expected call of GetByFingerprint.
func (mr *MockKeysServiceMockRecorder) GetByFingerprint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFingerprint", reflect.TypeOf((*MockKeysService)(nil).GetByFingerprint), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockKeysService) GetByID(arg0 context.Context, arg1 int) (*godo.Key, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*godo.Key)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockKeysServiceMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockKeysService)(nil).GetByID), arg0, arg1)
}

// List mocks base method.
func (m *MockKeysService) List(arg0 context.Context, arg1 *godo.ListOptions) ([]godo.Key, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]godo.Key)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockKeysServiceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKeysService)(nil).List), arg0, arg1)
}

// UpdateByFingerprint mocks base method.
func (m *MockKeysService) UpdateByFingerprint(arg0 context.Context, arg1 string, arg2 *godo.KeyUpdateRequest) (*godo.Key, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByFingerprint", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Key)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateByFingerprint indicates an expected call of UpdateByFingerprint.
func (mr *MockKeysServiceMockRecorder) UpdateByFingerprint(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByFingerprint", reflect.TypeOf((*MockKeysService)(nil).UpdateByFingerprint), arg0, arg1, arg2)
}

// UpdateByID mocks base method.
func (m *MockKeysService) UpdateByID(arg0 context.Context, arg1 int, arg2 *godo.KeyUpdateRequest) (*godo.Key, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*godo.Key)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockKeysServiceMockRecorder) UpdateByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockKeysService)(nil).UpdateByID), arg0, arg1, arg2)
}
