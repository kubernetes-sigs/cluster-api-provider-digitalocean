/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/digitalocean/godo (interfaces: StorageService)

// Package mock_computes is a generated GoMock package.
package mock_computes

import (
	context "context"
	godo "github.com/digitalocean/godo"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorageService is a mock of StorageService interface.
type MockStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceMockRecorder
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService.
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance.
func NewMockStorageService(ctrl *gomock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// CreateSnapshot mocks base method.
func (m *MockStorageService) CreateSnapshot(arg0 context.Context, arg1 *godo.SnapshotCreateRequest) (*godo.Snapshot, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", arg0, arg1)
	ret0, _ := ret[0].(*godo.Snapshot)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockStorageServiceMockRecorder) CreateSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockStorageService)(nil).CreateSnapshot), arg0, arg1)
}

// CreateVolume mocks base method.
func (m *MockStorageService) CreateVolume(arg0 context.Context, arg1 *godo.VolumeCreateRequest) (*godo.Volume, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", arg0, arg1)
	ret0, _ := ret[0].(*godo.Volume)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockStorageServiceMockRecorder) CreateVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockStorageService)(nil).CreateVolume), arg0, arg1)
}

// DeleteSnapshot mocks base method.
func (m *MockStorageService) DeleteSnapshot(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockStorageServiceMockRecorder) DeleteSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockStorageService)(nil).DeleteSnapshot), arg0, arg1)
}

// DeleteVolume mocks base method.
func (m *MockStorageService) DeleteVolume(arg0 context.Context, arg1 string) (*godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", arg0, arg1)
	ret0, _ := ret[0].(*godo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockStorageServiceMockRecorder) DeleteVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockStorageService)(nil).DeleteVolume), arg0, arg1)
}

// GetSnapshot mocks base method.
func (m *MockStorageService) GetSnapshot(arg0 context.Context, arg1 string) (*godo.Snapshot, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot", arg0, arg1)
	ret0, _ := ret[0].(*godo.Snapshot)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockStorageServiceMockRecorder) GetSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockStorageService)(nil).GetSnapshot), arg0, arg1)
}

// GetVolume mocks base method.
func (m *MockStorageService) GetVolume(arg0 context.Context, arg1 string) (*godo.Volume, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", arg0, arg1)
	ret0, _ := ret[0].(*godo.Volume)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockStorageServiceMockRecorder) GetVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockStorageService)(nil).GetVolume), arg0, arg1)
}

// ListSnapshots mocks base method.
func (m *MockStorageService) ListSnapshots(arg0 context.Context, arg1 string, arg2 *godo.ListOptions) ([]godo.Snapshot, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshots", arg0, arg1, arg2)
	ret0, _ := ret[0].([]godo.Snapshot)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSnapshots indicates an expected call of ListSnapshots.
func (mr *MockStorageServiceMockRecorder) ListSnapshots(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockStorageService)(nil).ListSnapshots), arg0, arg1, arg2)
}

// ListVolumes mocks base method.
func (m *MockStorageService) ListVolumes(arg0 context.Context, arg1 *godo.ListVolumeParams) ([]godo.Volume, *godo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes", arg0, arg1)
	ret0, _ := ret[0].([]godo.Volume)
	ret1, _ := ret[1].(*godo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListVolumes indicates an expected call of ListVolumes.
func (mr *MockStorageServiceMockRecorder) ListVolumes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockStorageService)(nil).ListVolumes), arg0, arg1)
}
