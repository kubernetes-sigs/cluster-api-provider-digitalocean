---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: "${CLUSTER_NAME}"
  labels:
    cni: "${CLUSTER_NAME}-crs-cni"
    ccm: "${CLUSTER_NAME}-crs-ccm"
spec:
  clusterNetwork:
    pods:
      cidrBlocks: ["192.168.0.0/16"]
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: DOCluster
    name: "${CLUSTER_NAME}"
  controlPlaneRef:
    kind: KubeadmControlPlane
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    name: "${CLUSTER_NAME}-control-plane"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: DOCluster
metadata:
  name: "${CLUSTER_NAME}"
spec:
  region: ${DO_REGION}
---
kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
  machineTemplate:
    infrastructureRef:
      kind: DOMachineTemplate
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      name: "${CLUSTER_NAME}-control-plane"
  kubeadmConfigSpec:
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
          provider-id: digitalocean://'{{ ds.meta_data["instance_id"] }}'
        name: '{{ ds.meta_data["local_hostname"] }}'
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
        name: '{{ ds.meta_data["local_hostname"] }}'
  version: "${KUBERNETES_VERSION}"
---
kind: DOMachineTemplate
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  template:
    spec:
      size: "${DO_CONTROL_PLANE_MACHINE_TYPE}"
      image: ${DO_CONTROL_PLANE_MACHINE_IMAGE}
      sshKeys:
        - ${DO_SSH_KEY_FINGERPRINT}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: "${CLUSTER_NAME}-md-0"
spec:
  clusterName: "${CLUSTER_NAME}"
  replicas: ${WORKER_MACHINE_COUNT}
  selector:
    matchLabels:
  template:
    metadata:
      labels:
        e2e.remediation.label: ""
    spec:
      clusterName: "${CLUSTER_NAME}"
      version: "${KUBERNETES_VERSION}"
      bootstrap:
        configRef:
          name: "${CLUSTER_NAME}-md-0"
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
      infrastructureRef:
        name: "${CLUSTER_NAME}-md-0"
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: DOMachineTemplate
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: DOMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-md-0"
spec:
  template:
    spec:
      size: "${DO_NODE_MACHINE_TYPE}"
      image: ${DO_NODE_MACHINE_IMAGE}
      sshKeys:
        - ${DO_SSH_KEY_FINGERPRINT}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: "${CLUSTER_NAME}-md-0"
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          name: "{{ ds.meta_data.local_hostname }}"
          kubeletExtraArgs:
            cloud-provider: external
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineHealthCheck
metadata:
  name: ${CLUSTER_NAME}-mhc-0
spec:
  clusterName: ${CLUSTER_NAME}
  maxUnhealthy: 100%
  selector:
    matchLabels:
      e2e.remediation.label: ""
  unhealthyConditions:
  - status: "False"
    timeout: 10s
    type: e2e.remediation.condition
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "${CLUSTER_NAME}-crs-cni"
data: ${CNI_RESOURCES}
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: "${CLUSTER_NAME}-crs-cni"
spec:
  strategy: ApplyOnce
  clusterSelector:
    matchLabels:
      cni: "${CLUSTER_NAME}-crs-cni"
  resources:
    - name: "${CLUSTER_NAME}-crs-cni"
      kind: ConfigMap
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "${CLUSTER_NAME}-crs-ccm"
data: ${CCM_RESOURCES}
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: "${CLUSTER_NAME}-crs-ccm"
spec:
  strategy: ApplyOnce
  clusterSelector:
    matchLabels:
      ccm: "${CLUSTER_NAME}-crs-ccm"
  resources:
    - name: "${CLUSTER_NAME}-crs-ccm"
      kind: ConfigMap
